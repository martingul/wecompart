version: "3.9"

services:
    db:
        image: postgres
        restart: always
        container_name: db
        volumes:
            - db_data:/var/lib/postgresql/data
        ports:
            - 5432:5432
        environment:
            POSTGRES_DB: ${DB_NAME}
            POSTGRES_USER: ${DB_USER}
            POSTGRES_PASSWORD: ${DB_PASSWORD}

    api:
        build: ./api
        restart: always
        container_name: api
        ports:
            - 5000:5000
        depends_on:
            - db
        environment:
            DB_HOST: ${DB_HOST}
            DB_PORT: ${DB_PORT}
            DB_NAME: ${DB_NAME}
            DB_PASSWORD: ${DB_PASSWORD}
            SMTP_USER: ${SMTP_USER}
            SMTP_PASSWORD: ${SMTP_PASSWORD}
            GOOGLE_MAPS_KEY: ${GOOGLE_MAPS_KEY}
            STRIPE_TEST_KEY: ${STRIPE_TEST_KEY}

    frontend:
        build: ./frontend
        restart: always
        container_name: frontend
        ports:
            - 8080:80
        profiles: ["frontend"]

    adminer:
        image: adminer
        restart: always
        container_name: adminer
        ports:
            - 5001:8080
        profiles: ["adminer"]

    app-service:
        image: budibase/apps
        restart: always
        container_name: bbapps
        ports:
            - "${APP_PORT}:4002"
        environment:
            SELF_HOSTED: 1
            COUCH_DB_URL: http://${COUCH_DB_USER}:${COUCH_DB_PASSWORD}@couchdb-service:5984
            WORKER_URL: http://worker-service:4003
            MINIO_URL: http://minio-service:9000
            MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
            MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
            INTERNAL_API_KEY: ${INTERNAL_API_KEY}
            BUDIBASE_ENVIRONMENT: ${BUDIBASE_ENVIRONMENT}
            PORT: 4002
            JWT_SECRET: ${JWT_SECRET}
            LOG_LEVEL: info
            SENTRY_DSN: https://a34ae347621946bf8acded18e5b7d4b8@o420233.ingest.sentry.io/5338131
            ENABLE_ANALYTICS: "true"
            REDIS_URL: redis-service:6379
            REDIS_PASSWORD: ${REDIS_PASSWORD}
        volumes:
            - ./budibase/logs:/logs
        depends_on:
            - worker-service
            - redis-service
        profiles: ["budibase"]

    worker-service:
        image: budibase/worker
        restart: always
        container_name: bbworker
        ports:
            - "${WORKER_PORT}:4003"
        environment:
            SELF_HOSTED: 1
            PORT: 4003
            CLUSTER_PORT: ${MAIN_PORT}
            JWT_SECRET: ${JWT_SECRET}
            MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
            MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
            MINIO_URL: http://minio-service:9000
            COUCH_DB_USERNAME: ${COUCH_DB_USER}
            COUCH_DB_PASSWORD: ${COUCH_DB_PASSWORD}
            COUCH_DB_URL: http://${COUCH_DB_USER}:${COUCH_DB_PASSWORD}@couchdb-service:5984
            INTERNAL_API_KEY: ${INTERNAL_API_KEY}
            REDIS_URL: redis-service:6379
            REDIS_PASSWORD: ${REDIS_PASSWORD}
        volumes:
            - ./budibase/logs:/logs
        depends_on:
            - redis-service
            - minio-service
            - couchdb-init
        profiles: ["budibase"]

    minio-service:
        image: minio/minio
        image: minio/minio
        container_name: minio-service
        volumes:
            - minio_data:/data
        ports:
            - "${MINIO_PORT}:9000"
        environment:
            MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
            MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
            MINIO_BROWSER: "off"
        command: server /data
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
            interval: 30s
            timeout: 20s
            retries: 3
        profiles: ["budibase"]

    proxy-service:
        image: envoyproxy/envoy:v1.16-latest
        restart: always
        container_name: proxy-service
        volumes:
            - ./budibase/envoy.yaml:/etc/envoy/envoy.yaml
        ports:
            - "${MAIN_PORT}:10000"
        depends_on:
            - minio-service
            - worker-service
            - app-service
            - couchdb-service
        profiles: ["budibase"]

    couchdb-init:
        image: curlimages/curl
        container_name: couchdb-init
        environment:
            PUT_CALL: "curl -u ${COUCH_DB_USER}:${COUCH_DB_PASSWORD} -X PUT couchdb-service:5984"
        depends_on:
            - couchdb-service
        command: ["sh","-c","sleep 10 && $${PUT_CALL}/_users && $${PUT_CALL}/_replicator; fg;"]
        profiles: ["budibase"]

    couchdb-service:
        image: ibmcom/couchdb3
        restart: always
        container_name: couchdb-service
        environment:
            - COUCHDB_PASSWORD=${COUCH_DB_PASSWORD}
            - COUCHDB_USER=${COUCH_DB_USER}
        ports:
            - "${COUCH_DB_PORT}:5984"
        volumes:
            - couchdb3_data:/opt/couchdb/data
        profiles: ["budibase"]
    
    redis-service:
        image: redis
        restart: always
        container_name: redis-service
        command: redis-server --requirepass ${REDIS_PASSWORD}
        ports:
            - "${REDIS_PORT}:6379"
        volumes:
            - redis_data:/data
        profiles: ["budibase"]
    
    watchtower-service:
        image: containrrr/watchtower
        container_name: watchtower-service
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
        command: --debug --http-api-update bbapps bbworker
        environment:
            - WATCHTOWER_HTTP_API=true
            - WATCHTOWER_HTTP_API_TOKEN=budibase
            - WATCHTOWER_CLEANUP=true
        labels:
            - "com.centurylinklabs.watchtower.enable=false"
        ports:
            - 6161:8080
        profiles: ["budibase"]

volumes:
  couchdb3_data:
    driver: local
  minio_data:
    driver: local
  redis_data:
    driver: local
  db_data:
